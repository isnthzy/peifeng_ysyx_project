// Generated by CIRCT firtool-1.56.0
module PreIF_s(	// @[<stdin>:3:3]
  input         clock,	// @[<stdin>:4:11]
                reset,	// @[<stdin>:5:11]
                PreIF_to_if_ready,	// @[playground/src/PreIF.scala:6:15]
                PreIF_for_id_Br_J_stall,	// @[playground/src/PreIF.scala:6:15]
                PreIF_for_id_Br_J_taken,	// @[playground/src/PreIF.scala:6:15]
  input  [31:0] PreIF_for_id_Br_J_target,	// @[playground/src/PreIF.scala:6:15]
  input         PreIF_for_id_flush,	// @[playground/src/PreIF.scala:6:15]
                PreIF_for_ex_epc_taken,	// @[playground/src/PreIF.scala:6:15]
  input  [31:0] PreIF_for_ex_epc_target,	// @[playground/src/PreIF.scala:6:15]
  input         PreIF_for_ex_Br_B_stall,	// @[playground/src/PreIF.scala:6:15]
                PreIF_for_ex_Br_B_taken,	// @[playground/src/PreIF.scala:6:15]
  input  [31:0] PreIF_for_ex_Br_B_target,	// @[playground/src/PreIF.scala:6:15]
  input         PreIF_for_ex_flush,	// @[playground/src/PreIF.scala:6:15]
                PreIF_raddr_ok,	// @[playground/src/PreIF.scala:6:15]
  output        PreIF_to_if_valid,	// @[playground/src/PreIF.scala:6:15]
  output [31:0] PreIF_to_if_bits_nextpc,	// @[playground/src/PreIF.scala:6:15]
                PreIF_to_if_bits_pc,	// @[playground/src/PreIF.scala:6:15]
                PreIF_mem_addr,	// @[playground/src/PreIF.scala:6:15]
  output        PreIF_read_en	// @[playground/src/PreIF.scala:6:15]
);

  reg         wait_br_addr_ok;	// @[playground/src/PreIF.scala:26:40]
  wire        br_modify =
    PreIF_for_ex_Br_B_taken | PreIF_for_ex_epc_taken | PreIF_for_id_Br_J_taken;	// @[playground/src/PreIF.scala:32:43]
  wire        PreIF_raddr_ok_0 = PreIF_raddr_ok & ~br_modify & ~wait_br_addr_ok;	// @[playground/src/PreIF.scala:25:36, :26:40, :32:43, :35:{37,48,54}]
  wire        fetch_wen =
    PreIF_to_if_ready & ~(PreIF_for_ex_Br_B_stall | PreIF_for_id_Br_J_stall);	// @[playground/src/PreIF.scala:23:31, :30:37, :36:{32,35}]
  wire        PreIF_flush = PreIF_for_ex_flush | PreIF_for_id_flush;	// @[playground/src/PreIF.scala:24:33, :38:35]
  wire        PreIF_ready_go = fetch_wen & PreIF_raddr_ok_0;	// @[playground/src/PreIF.scala:22:36, :23:31, :25:36, :40:30]
  reg  [31:0] PreIF_pc;	// @[playground/src/PreIF.scala:47:29]
  wire [31:0] PreIF_snpc = PreIF_pc + 32'h4;	// @[playground/src/PreIF.scala:47:29, :48:36, :52:26]
  wire [31:0] PreIF_dnpc =
    PreIF_for_ex_epc_taken
      ? PreIF_for_ex_epc_target
      : PreIF_for_ex_Br_B_taken ? PreIF_for_ex_Br_B_target : PreIF_for_id_Br_J_target;	// @[playground/src/PreIF.scala:44:17, :49:36, :53:20]
  wire [31:0] PreIF_nextpc =
    PreIF_for_id_Br_J_taken | PreIF_for_ex_Br_B_taken | PreIF_for_ex_epc_taken
      ? PreIF_dnpc
      : PreIF_snpc;	// @[playground/src/PreIF.scala:48:36, :49:36, :50:36, :54:{21,31}]
  wire        _GEN = PreIF_ready_go | br_modify;	// @[playground/src/PreIF.scala:22:36, :32:43, :65:23]
  always @(posedge clock) begin	// @[<stdin>:4:11]
    if (reset) begin	// @[<stdin>:4:11]
      wait_br_addr_ok <= 1'h0;	// @[playground/src/PreIF.scala:26:40]
      PreIF_pc <= 32'h80000000;	// @[playground/src/PreIF.scala:47:29]
    end
    else begin	// @[<stdin>:4:11]
      wait_br_addr_ok <= ~PreIF_raddr_ok & (_GEN | wait_br_addr_ok);	// @[playground/src/PreIF.scala:26:40, :65:{23,36}, :67:20, :69:23, :70:20]
      if (_GEN)	// @[playground/src/PreIF.scala:65:23]
        PreIF_pc <= PreIF_nextpc;	// @[playground/src/PreIF.scala:47:29, :50:36]
    end
  end // always @(posedge)
  assign PreIF_to_if_valid = ~PreIF_flush & ~reset & PreIF_ready_go;	// @[<stdin>:3:3, playground/src/PreIF.scala:22:36, :24:33, :41:{26,48}]
  assign PreIF_to_if_bits_nextpc = PreIF_nextpc;	// @[<stdin>:3:3, playground/src/PreIF.scala:50:36]
  assign PreIF_to_if_bits_pc = PreIF_pc;	// @[<stdin>:3:3, playground/src/PreIF.scala:47:29]
  assign PreIF_mem_addr = PreIF_pc;	// @[<stdin>:3:3, playground/src/PreIF.scala:47:29]
  assign PreIF_read_en = fetch_wen;	// @[<stdin>:3:3, playground/src/PreIF.scala:23:31]
endmodule

